$(function() {
  var container = RVR.container({}),
      grid = RVR.grid({
        parent: container.getElement(),
        dimensions: container.getLevelDimensions()
      }),

      rover = RVR.rover({
        parent: container.getElement(),
        grid: grid
      }),

      goal = RVR.goal({
        parent: container.getElement(),
        grid: grid,
        x: grid.getColumnCount() - 1,
        y: grid.getRowCount() - 1
      }),

      animatedRender = function() {
        d3.transition()
          .duration(750)
          .each(render);
      },

      render = function() {
        grid.render();
        rover.render();
        goal.render();
      },

      timeout,

      updateScene = function() {
        rover.updatePosition();

        if (!goal.reached(rover.getPosition())) {
          timeout = setTimeout(updateScene, RVR.transitionDuration);
        } else {
          $("#goal-reached").modal('show');
        }
      },

      generate = function() {
        rover.reset();
        grid.reset();
        animatedRender();
      },

      // Instruction vars
      enums = {
        direction: {name: "Current Direction", values: ["North", "South", "East", "West"]}
      },

      topLevelInstructions = RVR.instructionGroups.get(),

      renumberInstructions = function() {
        $(".line-number").each(function(index) {
          $(this).text(index + 1);
        });
      },

      addInstructionRow = function() {
        var row = $("<div/>", {class: "row"}).insertBefore("#add-instruction");
        var lineNumber = $("<div/>", {class: "span1-5"}).appendTo(row);
        lineNumber.append($("<h6/>", {class: "line-number"}));
        var instruction = $("<div/>", {class: "span2-5"}).appendTo(row);
        addInstructionSelect(instruction);
        renumberInstructions();
      },

      formatInstruction = function(instruction) {
        if (!instruction.id) return instruction.text;

        if (instruction.html) return instruction.html;

        return instruction.text; 
      },

      addInstructionSelect = function(parent) {
        var input = $("<input/>", {type: "hidden", class: "instruction", style: "width:100%"}).appendTo(parent),
            data = [],
            children;

        topLevelInstructions.forEach(function(instructionGroup) {
          children = [];

          instructionGroup.instructions.forEach(function(instruction) {
            children.push({id: instruction.value, text: instruction.label, html: instruction.html});
          });

          data.push({text: instructionGroup.label, children: children});
        });

        input.select2({
          placeholder: "Choose an instruction",
          data: data,
          formatResult: formatInstruction,
          formatSelection: formatInstruction
        });
      },

      runProgram = function() {
        var instructionId;

        $("#program-panel input.instruction").each(function() {
          instructionId = $(this).val();
          if (instructionId !== "") {
            RVR.instructionGroups.run(instructionId);
          }
        });
      };

    $("#generate").click(function() {
      generate();
    });

    $(".move").click(function() {
      var action = $(this).attr("data-action");
      if (action.indexOf("on") > -1) {
        rover.setCruise(true);
      } else {
        rover.setCruise(false);
      }
    });

    $(".rotate").click(function() {
      rover.rotate(-90);
    });

    addInstructionRow();

    $("#run-program").click(function() {
      runProgram();
      timeout = setTimeout(updateScene, RVR.transitionDuration);
    });

    $("#pause-program").click(function() {
      clearTimeout(timeout);
    });

    $("#add-instruction a").click(function() {
      addInstructionRow();
    });

    //$(document).on("change", "#program-panel .row:last-child select", function() {
    //  addInstructionRow();
    //});

    generate();

});
