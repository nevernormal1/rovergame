$(function() {
  var container = RVR.container({}),
      grid = RVR.grid({
        parent: container.getElement(),
        dimensions: container.getLevelDimensions()
      }),

      rover = RVR.rover({
        parent: container.getElement(),
        grid: grid
      }),

      goal = RVR.goal({
        parent: container.getElement(),
        grid: grid,
        x: grid.getColumnCount() - 1,
        y: grid.getRowCount() - 1
      }),

      animatedRender = function() {
        d3.transition()
          .duration(750)
          .each(render);
      },

      render = function() {
        grid.render();
        rover.render();
        goal.render();
      },

      timeout,

      updateScene = function() {
        rover.updatePosition();

        if (!goal.reached(rover.getPosition())) {
          timeout = setTimeout(updateScene, RVR.transitionDuration);
        } else {
          $("#goal-reached").modal('show');
        }
      },

      generate = function() {
        rover.reset();
        grid.reset();
        animatedRender();
      },

      enums = {
        direction: {name: "Current Direction", values: ["North", "South", "East", "West"]}
      },

      topLevelInstructions = RVR.instructionGroups.get(),

      renumberInstructions = function() {
        $("#program-panel > .row").each(function(index) {
          $(this).find(".line-number").text(index + 1);
        });

        //$(".line-number").each(function(index) {
        //  $(this).text(index + 1);
        //});
      },

      addBlock = function(instruction, element, placeholder) {
        var block, linkWrapper, link;

        if (placeholder) {
          block = $("<div/>", {class: "placeholder"}).append($("<p/>").text("Otherwise")).insertAfter(element.closest(".row"));
        }

        block = $("<div/>", {class: "well block"}).insertAfter(element.closest(".row"));
        linkWrapper = $("<p/>", {class: "add-instruction"}).appendTo(block);
        link = $("<a/>", {href: "#", text: "Add Instruction"}).appendTo(linkWrapper);

        addInstructionRow(linkWrapper);
      },

      removeBlock = function(instruction, element) {
        var nextRow = element.closest(".row").next();
        if (nextRow.hasClass("block")) {
          nextRow.remove();
        }
      },

      addInstructionRow = function(addLink) {
        var wrapper, lineNumber, instruction;
        wrapper = $("<div/>", {class: "row"}).insertBefore(addLink);
        lineNumber = $("<div/>", {class: "span1-5"}).appendTo(wrapper);
        lineNumber.append($("<h6/>", {class: "line-number"}));
        instruction = $("<div/>", {class: "span2-5 instruction-container"}).appendTo(wrapper);
        addInstructionSelect(instruction);
        renumberInstructions();
      },

      renderInstruction = function(instruction, container) {
        var input = container.find("input.instruction"),
            showInstructions = $('<i class="icon-circle-arrow-down pull-right show-instructions"></i>'),
            select2Container = container.find(".select2-container"),
            instructionText,
            argSelect;

        select2Container.hide();

        if (instruction.args && instruction.args.length > 0) {
          instructionText = $('<p/>');

          instruction.args.forEach(function(argParams) {
            argSelect = $("<select/>", {name: argParams.name, class: "arguments"});
            argParams.values.forEach(function(argValue) {
              argSelect.append($('<option/>', {value: argValue, text: argValue}));
            });

            instructionText.append(
              $('<span/>', {text: argParams.label}).append(argSelect)
            )
          });
        } else {
          instructionText = $('<p/>', {text: instruction.selectLabel || instruction.label});
        }

        showInstructions.click(function() {
          showInstructions.closest(".instruction-content").hide();
          select2Container.show();
          input.select2("open");
        });

        container.append(
          $('<div/>', {class: 'instruction-content'})
            .append(showInstructions)
            .append(instructionText)
        );

        if (typeof instruction.block !== "undefined") {
          addBlock(instruction, input);
          if (instruction.value === "if") {
            addBlock(instruction, input, "Otherwise");
          }
        } else {
          removeBlock(instruction, input);
        }
      },

      formatInstructionSelect = function(data, container) {
        renderInstruction(data.instruction, container.closest(".instruction-container"));

        return data.instruction.label; 
      },

      formatInstructionResult = function(data) {
        if (!data.id) return data.text;

        return data.instruction.label; 
      },

      addInstructionSelect = function(parent) {
        var input = $("<input/>", {type: "hidden", class: "instruction", style: "width:100%"}).appendTo(parent),
            data = [],
            children;

        topLevelInstructions.forEach(function(instructionGroup) {
          children = [];

          instructionGroup.instructions.forEach(function(instruction) {
            children.push({id: instruction.value, instruction: instruction});
          });

          data.push({text: instructionGroup.label, children: children});
        });

        input.select2({
          placeholder: "Choose an instruction",
          data: data,
          formatResult: formatInstructionResult,
          formatSelection: formatInstructionSelect
        });
      },

      prepareInstruction = function(instructionElement) {
        var data, instruction, instance, container;

        data = instructionElement.select2("data");
        if (data == null) {
          return;
        }
        instruction = data.instruction;
        instance = instruction.instance();
        container = instructionElement.closest(".instruction-container");

        container.find("select.arguments").each(function() {
          instance.arg($(this).attr("name"), $(this).val());
        });

        if (instruction.block) {
          container.closest(".row").next().children().not(".block").find("input.instruction").each(function() {
            instance.subInstruction(prepareInstruction($(this)));
          });
        }

        if (instruction.value === "if") {
          container.closest(".row").next().next().next().children().not(".block").find("input.instruction").each(function() {
            instance.elseInstruction(prepareInstruction($(this)));
          });
        }

        return instance;
      },

      initializeProgramPanel = function() {
        $("#program-panel").empty()
          .append($("<p/>", {class: "add-instruction"})
            .append($("<a/>", {href: "#"}).text("Add Instruction")))

        addInstructionRow($(".add-instruction"));
        generate();
      },

      runProgram = function() {
        $("#program-panel > div.row").each(function() {
          prepareInstruction($(this).find("input.instruction")).callback();
        });
      };

    $("#generate").click(function() {
      generate();
    });

    $("#run-program").click(function() {
      runProgram();
      timeout = setTimeout(updateScene, RVR.transitionDuration);
    });

    $("#pause-program").click(function() {
      clearTimeout(timeout);
    });

    $("#reset-program").click(function() {
      clearTimeout(timeout);
      initializeProgramPanel();
    });

    $(document).on("click", ".add-instruction a", function() {
      addInstructionRow($(this).closest(".add-instruction"));
      return false;
    });

    $(document).on("click", ".show-instructions", function() {
    });

    initializeProgramPanel();
});

