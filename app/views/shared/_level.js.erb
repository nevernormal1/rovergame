$(function() {
  var container = RVR.container({}),
      grid = RVR.grid({
        parent: container.getElement(),
        dimensions: container.getLevelDimensions()
      }),

      rover = RVR.rover({
        parent: container.getElement(),
        grid: grid
      }),

      goal = RVR.goal({
        parent: container.getElement(),
        grid: grid,
        x: grid.getColumnCount() - 1,
        y: grid.getRowCount() - 1
      }),

      animatedRender = function() {
        d3.transition()
          .duration(750)
          .each(render);
      },

      render = function() {
        grid.render();
        rover.render();
        goal.render();
      },

      timeout,

      updateScene = function() {
        rover.updatePosition();

        if (!goal.reached(rover.getPosition())) {
          timeout = setTimeout(updateScene, RVR.transitionDuration);
        } else {
          $("#goal-reached").modal('show');
        }
      },

      generate = function() {
        rover.reset();
        grid.reset();
        animatedRender();
      },

      enums = {
        direction: {name: "Current Direction", values: ["North", "South", "East", "West"]}
      },

      topLevelInstructions = RVR.instructionGroups.get(),

      renumberInstructions = function() {
        $("#program-panel > .row").each(function(index) {
          $(this).find(".line-number").text(index + 1);
        });

        //$(".line-number").each(function(index) {
        //  $(this).text(index + 1);
        //});
      },

      addBlock = function(instruction, element) {
        var block, linkWrapper, link;

        block = $("<div/>", {class: "well block"}).insertAfter(element.closest(".row"));
        linkWrapper = $("<p/>", {class: "add-instruction"}).appendTo(block);
        link = $("<a/>", {href: "#", text: "Add Instruction"}).appendTo(linkWrapper);

        addInstructionRow(linkWrapper);
      },

      removeBlock = function(instruction, element) {
        var nextRow = element.closest(".row").next();
        if (nextRow.hasClass("block")) {
          nextRow.remove();
        }
      },

      addInstructionRow = function(addLink) {
        var wrapper, lineNumber, instruction;
        wrapper = $("<div/>", {class: "row"}).insertBefore(addLink);
        lineNumber = $("<div/>", {class: "span1-5"}).appendTo(wrapper);
        lineNumber.append($("<h6/>", {class: "line-number"}));
        instruction = $("<div/>", {class: "span2-5"}).appendTo(wrapper);
        addInstructionSelect(instruction);
        renumberInstructions();
      },

      formatInstruction = function(data) {
        if (!data.id) return data.text;

        if (data.instruction.html) return data.instruction.html;

        return data.instruction.label; 
      },

      addInstructionSelect = function(parent) {
        var input = $("<input/>", {type: "hidden", class: "instruction", style: "width:100%"}).appendTo(parent),
            data = [],
            children;

        topLevelInstructions.forEach(function(instructionGroup) {
          children = [];

          instructionGroup.instructions.forEach(function(instruction) {
            children.push({id: instruction.value, instruction: instruction});
          });

          data.push({text: instructionGroup.label, children: children});
        });

        input.select2({
          placeholder: "Choose an instruction",
          data: data,
          formatResult: formatInstruction,
          formatSelection: formatInstruction
        });

        input.change(function(event) {
          var instruction = input.select2("data").instruction;
          if (typeof instruction.async !== "undefined") {
            addBlock(instruction, $(this));
          } else {
            removeBlock(instruction, $(this));
          }
        });
      },

      runProgram = function() {
        $("#program-panel > div.row").each(function() {
          var instructionId, subInstructionIds;

          instructionId = $(this).find("input.instruction").val();

          if ($(this).next().hasClass("block")) {
            subInstructionIds = $(this).next().find("input.instruction").map(function() {
              return $(this).val();
            }).toArray();
          }

          if (instructionId !== "") {
            RVR.instruction.run(instructionId, subInstructionIds);
          }
        });
      };

    $("#generate").click(function() {
      generate();
    });

    $("#run-program").click(function() {
      runProgram();
      timeout = setTimeout(updateScene, RVR.transitionDuration);
    });

    $("#pause-program").click(function() {
      clearTimeout(timeout);
    });

    $(document).on("click", ".add-instruction a", function() {
      addInstructionRow($(this).closest(".add-instruction"));
      return false;
    });

    addInstructionRow($(".add-instruction"));
    generate();
});

