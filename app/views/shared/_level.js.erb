$(function() {
  var container = RVR.container({}),
      grid = RVR.grid({
        parent: container.getElement(),
        dimensions: container.getLevelDimensions()
      }),
      rover = RVR.rover({container: container}),
      roverOffsetX = grid.offsetX(0.25),
      roverOffsetY = grid.offsetY(0.25),
      goal = {x: grid.getColumnCount() - 1, y: grid.getRowCount() - 1},
      goalReached = false,

      transitionDuration = 300,
      animatedRender = function() {
        d3.transition()
          .duration(750)
          .each(render);
      },

      render = function() {
        grid.render();

        var roverSelection = container.getElement().selectAll(".rover").data([rover.getPosition()]);
        var roverEnter = roverSelection.enter()
          .append("rect")
          .attr("class", "rover")
          .attr("x", roverOffsetX)
          .attr("y", roverOffsetY)
          .attr("width", grid.getCellWidth() / 2)
          .attr("height", grid.getCellHeight() / 2);

        var goalSelection = container.getElement().selectAll(".goal").data([goal]);
        goalSelection.enter()
          .append("circle")
          .attr("class", "goal")
          .attr("r", grid.getCellWidth() / 4)
          .attr("cx", grid.offsetX(0))
          .attr("cy", grid.offsetY(0));
      },

      reachedGoal = function() {
        var position = rover.getPosition();
        if (position.x === goal.x && position.y === goal.y) return true;
        return false;
      },

      endLevel = function() {
        goalReached = true;
        $("#goal-reached").modal('show');
      },

      moveRover = function(coordinate, direction) {
        if (reachedGoal()) {
          endLevel();
        }

        if (!rover.isMoving()) return;

        var nextPosition = rover.nextPosition();
        if (grid.outOfBounds(nextPosition) || grid.collision(nextPosition)) return;

        rover.updatePosition();

        var newPosition = rover.getPosition();
        var newX = roverOffsetX(newPosition);
        var newY = roverOffsetY(newPosition);
        container.getElement().selectAll(".rover").transition()
          .duration(transitionDuration)
          .ease('linear')
          .attr("transform", "translate(" + newX + "," + newY + ")");
      },

      updateScene = function() {
        moveRover();
        if (!goalReached) {
          setTimeout(function() { updateScene(); }, transitionDuration);
        }
      },

      generate = function() {
        rover.reset();
        grid.reset();
        animatedRender();
      };

    $("#generate").click(function() {
      generate();
    });

    $(".move").click(function() {
      var action = $(this).attr("data-action");
      if (action.indexOf("on") > -1) {
        rover.setCruise(true);
      } else {
        rover.setCruise(false);
      }
    });

    $(".rotate").click(function() {
      rover.rotate(-90);
    });

    generate();

    setTimeout(function() { updateScene() }, transitionDuration);
});
