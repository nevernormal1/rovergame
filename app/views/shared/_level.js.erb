$(function() {
  var container_dimensions = {width: 700, height: 467},
      margins = {top: 20, right: 20, bottom: 16, left: 16},
      level_dimensions = {
        width: container_dimensions.width - margins.left - margins.right,
        height: container_dimensions.height - margins.top - margins.bottom
      },
      x = d3.scale.linear().range([0, level_dimensions.width]),
      y = d3.scale.linear().range([0, level_dimensions.height]),
      transitionDuration = 300,

      rover = RVR.rover({});
      grid = RVR.grid({rowCount: 14, columnCount: 21}),
      goal = {x: grid.getColumnCount() - 1, y: grid.getRowCount() - 1},
      cellWidth = level_dimensions.width / grid.getColumnCount(),
      cellHeight = level_dimensions.height / grid.getRowCount(),
      goalReached = false,
      offsetX = function(d) {
        return x(d.x) - cellWidth / 2;
      },
      offsetY = function(d) {
        return y(d.y) - cellHeight / 2;
      },
      roverOffsetX = function(d) {
        return x(d.x) - (cellWidth / 4);
      },
      roverOffsetY = function(d) {
        return y(d.y) - (cellHeight / 4);
      },

      svg = d3.select("#level-content")
        .append("svg")
        .attr("height", container_dimensions.height)
        .attr("width", container_dimensions.width)
        .append("g")
        .attr("transform", "translate(" + margins.left + "," + margins.top + ")"),

      animatedRender = function() {
        d3.transition()
          .duration(750)
          .each(render);
      },

      render = function() {
        var wallSelection = svg.selectAll(".wall").data(grid.getWalls());
        wallSelection.enter()
          .append("g")
          .attr("class", "wall");

        wallSelection.exit().remove();

        var wallBlocks = wallSelection.selectAll(".block")
          .data(function(d) { return d; });

        wallBlocks.enter()
          .append("rect")
          .attr("class", "block")
          .attr("x", offsetX)
          .attr("y", offsetY)
          .attr("rx", "1")
          .attr("ry", "1")
          .attr("height", cellHeight)
          .attr("width", cellWidth);

        wallBlocks.transition()
          .attr("x", offsetX)
          .attr("y", offsetY);

        var roverSelection = svg.selectAll(".rover").data([rover.getPosition()]);
        var roverEnter = roverSelection.enter()
          .append("rect")
          .attr("class", "rover")
          .attr("x", roverOffsetX)
          .attr("y", roverOffsetY)
          .attr("width", cellWidth / 2)
          .attr("height", cellHeight / 2);

        var goalSelection = svg.selectAll(".goal").data([goal]);
        goalSelection.enter()
          .append("circle")
          .attr("class", "goal")
          .attr("r", cellWidth / 4)
          .attr("cx", function(d) { return x(d.x); })
          .attr("cy", function(d) { return y(d.y); });
      },

      reachedGoal = function() {
        var position = rover.getPosition();
        if (position.x === goal.x && position.y === goal.y) return true;
        return false;
      },

      endLevel = function() {
        goalReached = true;
        $("#goal-reached").modal('show');
      },

      moveRover = function(coordinate, direction) {
        if (reachedGoal()) {
          endLevel();
        }

        if (!rover.isMoving()) return;

        var nextPosition = rover.nextPosition();
        if (grid.outOfBounds(nextPosition) || grid.collision(nextPosition)) return;

        rover.updatePosition();

        svg.selectAll(".rover").transition()
          .duration(transitionDuration)
          .ease('linear')
          .attr("transform", "translate(" + x(rover.getPosition().x) + "," + y(rover.getPosition().y) + ")");
      },

      updateScene = function() {
        moveRover();
        if (!goalReached) {
          setTimeout(function() { updateScene(); }, transitionDuration);
        }
      },

      generate = function() {
        rover.reset();
        grid.reset();
        animatedRender();
      };

    $("#generate").click(function() {
      generate();
    });

    $(".move").click(function() {
      var action = $(this).attr("data-action");
      if (action.indexOf("on") > -1) {
        rover.cruise(true);
      } else {
        rover.cruise(false);
      }
    });

    $(".rotate").click(function() {
      rover.rotate(-90);
    });

    x.domain([0, grid.getColumnCount() - 1]);
    y.domain([0, grid.getRowCount() - 1]);

    generate();

    setTimeout(function() { updateScene() }, transitionDuration);
});
