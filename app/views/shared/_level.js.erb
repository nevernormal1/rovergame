$(function() {
  var container_dimensions = {width: 700, height: 467},
      margins = {top: 20, right: 20, bottom: 20, left: 20},
      level_dimensions = {
        width: container_dimensions.width - margins.left - margins.right,
        height: container_dimensions.height - margins.top - margins.bottom
      },
      grid,
      gridRows = 20,
      gridColumns = 30,
      walls = [],
      rover = [{x: 0, y: 0}],
      goal = [{x: gridColumns - 1, y: gridRows - 1}],
      x = d3.scale.linear().range([0, level_dimensions.width]),
      y = d3.scale.linear().range([0, level_dimensions.height]),

      line = d3.svg.line()
        .x(function(d) { return x(d.x); })
        .y(function(d) { return y(d.y); });

      svg = d3.select("#level-content")
        .append("svg")
        .attr("height", container_dimensions.height)
        .attr("width", container_dimensions.width)
        .append("g")
        .attr("transform", "translate(" + margins.left + "," + margins.top + ")"),

      buildWalls = function(numWalls) {
        var i, j, y=0, minY=1, maxY, wall;
        grid = new Array(gridRows);
        for(i=0; i<gridRows; i++) {
          grid[i] = [];
          for(j=0; j<gridColumns; j++) {
            grid[i].push(0);
          }
        }

        for(i=0; i<numWalls; i++) {
          wall = new Array();
          maxY = gridRows - 1 - ((numWalls - i - 1) * 2)
          y = Math.floor(Math.random() * (maxY - minY)) + minY;
          if (i % 2 === 0) {
            // Left wall
            for(j=0; j<gridColumns-2; j++) {
              wall.push({x: j, y: y});
            }
          } else {
            // Right wall
            for(j=2; j<gridColumns; j++) {
              wall.push({x: j, y: y});
            }
          }
          walls.push(wall);
          minY = y + 2;
        }
      },

      populateGrid = function() {
        var i, j, wall, wallPoint;
        for(i=0; i<walls.length; i++) {
          wall = walls[i];
          for(j=0; j<wall.length; j++) {
            wallPoint = wall[j];
            grid[wallPoint.y][wallPoint.x] = 1;
          }
        }
      },

      render = function() {
        var wallSelection = svg.selectAll(".wall").data(walls);
        wallSelection.enter()
          .append("path")
          .attr("class", "wall")
          .attr("d", line);

        var roverSelection = svg.selectAll(".rover").data(rover);
        roverSelection.enter()
          .append("circle")
          .attr("class", "rover")
          .attr("r", "4")
          .attr("cx", function(d) { return x(d.x); })
          .attr("cy", function(d) { return y(d.y); });

        var goalSelection = svg.selectAll(".goal").data(goal);
        goalSelection.enter()
          .append("circle")
          .attr("class", "goal")
          .attr("r", "6")
          .attr("cx", function(d) { return x(d.x); })
          .attr("cy", function(d) { return y(d.y); });

      };

      x.domain([0, gridColumns - 1]);
      y.domain([0, gridRows - 1]);

      buildWalls(4);
      populateGrid();
      render();
});
